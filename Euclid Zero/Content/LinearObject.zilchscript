class LinearObject : ZilchComponent
{
  sends PlacingStarted : ShapeEvent;
  sends PlacedAsStartPoint : ShapeEvent;
  sends PlacedAsEndPoint : ShapeEvent;
  sends RenderingComplete : ShapeEvent;
  
  
  [Dependency] var ObjectBase : ObjectBase;
  
  
  [Static] var InfinityDistance : Real = 100.0;
  
  
  [Property] var Type : LinearObjectType = LinearObjectType.Segment;
  //[Property] var TypeInt : Integer = 0;   // TODO: remove on bugfix
  [Property] var Color : Real4 = Colors.Yellow;
  [Property] var DrawDuration : Real = 1.0;
  [Property] var GhostLinePulsePeriod : Real = 1.0;
  [Property] var RenderGhostArchetype : Archetype = Archetype.RenderGhost;
  [Property] var RenderGhostFadeDuration : Real = 0.1;
  
  var T_ : Real = 0.0;
  var T : Real
  {
    get { return this.T_; }
    
    set
    {
      var dt = value - this.T_;
      
      this.T_ = value;
      
      var start = Real3();
      var end   = Real3();
      
      if (this.Type == LinearObjectType.Segment)
      //if (this.TypeInt == LinearObjectType.Segment)  // TODO: remove on bugfix
      {
        start = this.P0.Transform.WorldTranslation;
        end   = this.P1.Transform.WorldTranslation;
        var difference = end - start;
        end = start + this.T_ * difference;
      }
      else if (this.Type == LinearObjectType.Ray)
      //else if (this.TypeInt == LinearObjectType.Ray)  // TODO: remove on bugfix
      {
        start = this.P0.Transform.WorldTranslation;
        
        if (this.T_ < 1.0)
        {
          end = this.P1.Transform.WorldTranslation;
          var difference = end - start;
          end = start + this.T_ * difference;
        }
        else
        {
          var p1 = this.P1.Transform.WorldTranslation;
          var difference = p1 - start;
          var direction = Math.Normalize(difference);
          end   = p1 + LinearObject.InfinityDistance * direction;
        }
      }
      else // this.Type == LinearObjectType.Line
      {
        var p0 = this.P0.Transform.WorldTranslation;
        var p1 = this.P1.Transform.WorldTranslation;
        var difference = p1 - p0;
        var direction = Math.Normalize(difference);
        start = p0 - LinearObject.InfinityDistance * direction;
        
        if (this.T_ < 1.0)
        {
          end = p0 + this.T_ * difference;
        }
        else
        {
          end = p1 + LinearObject.InfinityDistance * direction;
        }
      }
      
      this.Line.Start = start;
      this.Line.End = end;
      this.Line.Color = this.Color;
      
      // TODO: remove this check when that bug gets fixed that makes logic update
      // fire for a frame after the space gets destroyed
      //if (this.Space != null && !this.Space.MarkedForDestruction)
      //  this.CreateRenderGhost(start, end, dt);
      
      // TODO:
      // 
      // figure out what's up with ghosts. for now, no ghosts
    }
  }
  
  
  
  var Line : DebugLine;
  var GhostLine : DebugLine;
  var GhostPulseTimer : Real = 0.0;
  var GhostOpacityMinScalar : Real = 0.25;
  var GhostOpacityMaxScalar : Real = 0.6;
  var GhostColorMin : Real4;
  var GhostColorMax : Real4;
  var Ghosting : Boolean = false;
  
  var P0_ : Cog;
  var P1_ : Cog;
  var ColliderCog_ : Cog;
  
  var P0 : Cog
  {
    get
    {
      if (this.P0_ == null) this.P0_ = this.Owner.ChildrenArray[0];
      return this.P0_;
    }
  }
  
  var P1 : Cog
  {
    get
    {
      if (this.P1_ == null) this.P1_ = this.Owner.ChildrenArray[1];
      return this.P1_;
    }
  }
  
  var ColliderCog : Cog
  {
    get
    {
      if (this.ColliderCog_ == null) this.ColliderCog_ = this.Owner.ChildrenArray[2];
      return this.ColliderCog_;
    }
  }
  
  
  function Initialize(init : CogInitializer)
  {
    Zero.Connect(this.Owner, Events.Placing0Complete, this.OnPlacing0Complete);
    Zero.Connect(this.Owner, Events.Placing1Complete, this.OnPlacing1Complete);
    Zero.Connect(this.Owner, Events.ObjectShouldChangeColor, this.OnObjectShouldChangeColor);
  }
  
  
  function OnObjectShouldChangeColor(event : ShapeEvent)
  {
    this.Color = event.Color;
    this.GhostColorMin = this.Color;
    this.GhostColorMin.W *= this.GhostOpacityMinScalar;
    this.GhostColorMax = this.Color;
    this.GhostColorMax.W *= this.GhostOpacityMaxScalar;
    this.P0.DispatchEvent(Events.ObjectShouldChangeColor, event);
    this.P1.DispatchEvent(Events.ObjectShouldChangeColor, event);
  }
  
  
  function OnPlacing0Complete(event : ShapeEvent)
  {
    this.P0.DispatchEvent(Events.PlacedAsStartPoint, event);
    this.P1.DispatchEvent(Events.PlacingStarted, event);
    
    this.Color = event.Color;
    this.GhostColorMin = this.Color;
    this.GhostColorMin.W *= this.GhostOpacityMinScalar;
    this.GhostColorMax = this.Color;
    this.GhostColorMax.W *= this.GhostOpacityMaxScalar;
    
    this.BeginGhosting();
  }
  
  
  function OnPlacing1Complete(event : ShapeEvent)
  {
    this.EndGhosting();
    
    //this.P0.DispatchEvent(Events.PlacedAsStartPoint, event);
    this.P1.DispatchEvent(Events.PlacedAsEndPoint, event);
    
    this.Color = event.Color;
    
    this.OrientGhostLineAndCollider();
    
    this.BeginRendering();
  }
  
  
  function OnFrameUpdate(event : UpdateEvent)
  {
    if (this.Ghosting)
      this.UpdateGhosting(event.Dt);
    else
      this.UpdateRender();
  }
  
  
  function BeginGhosting()
  {
    this.Ghosting = true;
    this.ColliderCog.Collider.Ghost = true;
    
    this.GhostLine = DebugLine();
    
    Zero.Connect(this.Space, Events.FrameUpdate, this.OnFrameUpdate);
  }
  
  
  function UpdateGhosting(dt : Real)
  {
    var interpolant = HM[Real].CosineMagic(this.GhostPulseTimer, this.GhostLinePulsePeriod, 0.0, 1.0);
    this.GhostLine.Color = Math.Lerp(this.GhostColorMin, this.GhostColorMax, interpolant);
    
    DebugDraw.Add(this.GhostLine);
    
    this.GhostPulseTimer += dt;
    
    this.OrientGhostLineAndCollider();
  }
  
  
  function EndGhosting()
  {
    this.Ghosting = false;
    this.ColliderCog.Collider.Ghost = false;
    
    Zero.Disconnect(this.Space, Events.LogicUpdate, this);
  }
  
  
  function BeginRendering()
  {
    this.Line = DebugLine();
    var color = this.Color;
    color.W = 0.0;
    this.Line.Color = color;
    
    this.Owner.Actions.Cancel();
    
    var drawSeq = Action.Sequence(this.Owner.Actions);
      
      var ease = SampleCurve.SegmentDrawCurve;
      
      if (this.Type == LinearObjectType.Ray)
      //if (this.TypeInt == LinearObjectType.Ray)  // TODO: remove on bugfix
        ease = SampleCurve.RayDrawCurve;
      else if (this.Type == LinearObjectType.Line)
      //else if (this.TypeInt == LinearObjectType.Line)  // TODO: remove on bugfix
        ease = SampleCurve.LineDrawCurve;
      
      Action.Property(drawSeq, @this.T, 1.0, this.DrawDuration, ease);
      Action.Call(drawSeq, this.EndRendering);
      
    Zero.Connect(this.Space, Events.FrameUpdate, this.OnFrameUpdate);
  }
  
  
  function UpdateRender()
  {
    DebugDraw.Add(this.Line);
  }
  
  
  function EndRendering()
  {
    Zero.Disconnect(this.Space, Events.LogicUpdate, this);
    
    this.Owner.DispatchEvent(Events.RenderingComplete, ShapeEvent());
  }
  
  
  function OrientGhostLineAndCollider()
  {
    var p0 = this.P0.Transform.WorldTranslation;
    var p1 = this.P1.Transform.WorldTranslation;
    var difference = p1 - p0;
    var distance = Math.Length(difference);
    var direction = Math.Normalize(difference);
    
    if (this.Type == LinearObjectType.Ray)
    {
      p1 += LinearObject.InfinityDistance * direction;
    }
    else if (this.Type == LinearObjectType.Line)
    {
      p0 -= LinearObject.InfinityDistance * direction;
      p1 += LinearObject.InfinityDistance * direction;
    }
    
    this.GhostLine.Start = p0;
    this.GhostLine.End   = p1;
    
    difference = p1 - p0;
    distance = Math.Length(difference);
    
    var midpoint = (p0 + p1) / 2.0;
    var angle = Math.ATan2(difference.Y, difference.X);
    this.ColliderCog.Transform.WorldTranslation = midpoint;
    this.ColliderCog.Transform.EulerAngles = Real3.ZAxis * angle;
    this.ColliderCog.CapsuleCollider.Height = distance;
  }
  
  
  function CreateRenderGhost(start : Real3, end : Real3, dt : Real)
  {
    var difference = end - start;
    var length = Math.Length(difference);
    start += ((this.DrawDuration - dt) / this.DrawDuration) * difference;
    var average = (start + end) / 2.0;
    average.Z = 1.0;
    var ghost = this.Space.CreateAtPosition(this.RenderGhostArchetype, average);
    difference = end - start;
    var angle = Math.ATan2(difference.Y, difference.X);
    ghost.Transform.SetEulerAnglesXYZ(0.0, 0.0, angle);
    length = Math.Length(difference);
    var xSize = length / ghost.Transform.Scale.X + 1.0;
    var ySize = 1.0;
    var size = Real2(xSize, ySize);
    ghost.Area.Size = size;
    
    ghost.Sprite.VertexColor = Colors.Clear;
    
    var targetColor = this.Color;
    var duration = this.RenderGhostFadeDuration;
    
    var fadeSeq = Action.Sequence(ghost.Actions);
      
      Action.Property(fadeSeq, @ghost.Sprite.VertexColor, targetColor, duration, Ease.QuadOut);
      Action.Call(fadeSeq, ghost.Destroy);
  }
}


enum LinearObjectType
{
  Segment,
  Ray,
  Line,
}
